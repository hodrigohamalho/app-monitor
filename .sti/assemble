#!/bin/sh

# restore maven dependencies downloaded in a previous build,
# so they do not have to be downloaded again.
# /tmp/artifacts will only be present in the incremental build scenario
# in which the target image name is an existing docker image which contains
# dependencies from a prior build execution.
function restore_saved_artifacts() {
  if [ "$(ls /tmp/artifacts/ 2>/dev/null)" ]; then
    echo -n "Restoring saved artifacts from prior build..."
    mv /tmp/artifacts/* $HOME/.
  fi
}

ls -hall

# Source code provided to STI is at ${HOME}/source
LOCAL_SOURCE_DIR=${HOME}/source
mkdir -p $LOCAL_SOURCE_DIR

# Resulting WAR files will be deployed to /wildfly/standalone/deployments
DEPLOY_DIR=$JBOSS_HOME/standalone/deployments

# Copy the source for compilation
cp -ad /tmp/src/* $LOCAL_SOURCE_DIR

# If a pom.xml is present, this is a normal build scenario
# so run maven.
if [ -f "$LOCAL_SOURCE_DIR/pom.xml" ]; then
  # restore any maven dependencies which will be present if this is an
  # incremental build
  restore_saved_artifacts

  pushd $LOCAL_SOURCE_DIR &> /dev/null
  #JAVA_HOME=/etc/alternatives/java_sdk_1.7.0

  if [ -z "$MAVEN_ARGS" ]; then
    export MAVEN_ARGS="package -DskipTests"
  fi

  echo "Found pom.xml... attempting to build with 'mvn -e ${MAVEN_ARGS}'"

  echo "Maven version:"
  mvn --version

  # Execute the actual build
  mvn $MAVEN_ARGS

  ERR=$?
  if [ $ERR -ne 0 ]; then
    echo "Aborting due to error code $ERR from Maven build"
    exit $ERR
  fi

  echo "Copying built war files into $DEPLOY_DIR for later deployment..."
  cp target/*.war $DEPLOY_DIR >& /dev/null

  popd &> /dev/null
else
  echo "Copying binaries in source directory into $DEPLOY_DIR for later deployment..."
fi
